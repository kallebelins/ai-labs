#!/usr/bin/env python3
"""
Script para configurar documentos no Sistema RAG Avan√ßado
Carrega documentos de exemplo e os adiciona ao vetorstore
"""

import sys
import logging
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

from src.utils.logging_config import setup_logging
from src.utils.config import load_config
from src.core.rag_system import RAGSystem


def load_sample_documents():
    """Carrega documentos de exemplo"""
    documents = [
        {
            "content": """A intelig√™ncia artificial (IA) √© um campo da computa√ß√£o que busca criar sistemas capazes de realizar tarefas que normalmente requerem intelig√™ncia humana. Isso inclui reconhecimento de fala, tomada de decis√µes, tradu√ß√£o entre idiomas e muito mais.

A IA pode ser dividida em v√°rias subcategorias:
- Machine Learning: algoritmos que aprendem com dados
- Deep Learning: redes neurais com m√∫ltiplas camadas
- Processamento de Linguagem Natural: compreens√£o e gera√ß√£o de texto
- Vis√£o Computacional: an√°lise e interpreta√ß√£o de imagens

A IA est√° transformando diversos setores, desde sa√∫de at√© finan√ßas, e continua evoluindo rapidamente.""",
            "metadata": {"source": "ai_overview.txt", "topic": "Intelig√™ncia Artificial", "type": "overview"}
        },
        {
            "content": """Machine Learning √© um subcampo da intelig√™ncia artificial que permite aos computadores aprenderem sem serem explicitamente programados para tarefas espec√≠ficas. Em vez disso, os algoritmos de ML identificam padr√µes nos dados e fazem previs√µes ou decis√µes baseadas nesses padr√µes.

Tipos principais de Machine Learning:
1. Aprendizado Supervisionado: usa dados rotulados para treinar modelos
2. Aprendizado N√£o Supervisionado: encontra padr√µes em dados n√£o rotulados
3. Aprendizado por Refor√ßo: aprende atrav√©s de tentativa e erro

Aplica√ß√µes comuns incluem:
- Sistemas de recomenda√ß√£o
- Detec√ß√£o de fraudes
- An√°lise de sentimentos
- Previs√£o de vendas
- Diagn√≥stico m√©dico""",
            "metadata": {"source": "machine_learning.txt", "topic": "Machine Learning", "type": "explanation"}
        },
        {
            "content": """Deep Learning √© uma subcategoria do machine learning que utiliza redes neurais artificiais com m√∫ltiplas camadas (por isso "deep") para processar dados complexos. Essas redes s√£o inspiradas na estrutura do c√©rebro humano.

Caracter√≠sticas principais:
- M√∫ltiplas camadas de neur√¥nios artificiais
- Aprendizado hier√°rquico de caracter√≠sticas
- Requer grandes quantidades de dados
- Computa√ß√£o intensiva

Aplica√ß√µes de sucesso:
- Reconhecimento de imagem e v√≠deo
- Processamento de linguagem natural
- Tradu√ß√£o autom√°tica
- Reconhecimento de fala
- Jogos e rob√≥tica

Frameworks populares incluem TensorFlow, PyTorch e Keras.""",
            "metadata": {"source": "deep_learning.txt", "topic": "Deep Learning", "type": "explanation"}
        },
        {
            "content": """RAG (Retrieval-Augmented Generation) √© uma t√©cnica que combina recupera√ß√£o de informa√ß√µes com gera√ß√£o de texto para produzir respostas mais precisas e fundamentadas. Em vez de gerar respostas apenas com o conhecimento pr√©-treinado do modelo, o RAG primeiro recupera documentos relevantes e depois usa essas informa√ß√µes para gerar a resposta.

Vantagens do RAG:
- Reduz alucina√ß√µes (informa√ß√µes falsas)
- Permite acesso a informa√ß√µes atualizadas
- Melhora a precis√£o das respostas
- Facilita a verifica√ß√£o de fontes
- Permite personaliza√ß√£o com dados espec√≠ficos

Componentes t√≠picos:
1. Sistema de recupera√ß√£o (vectorstore)
2. Gerador de texto (LLM)
3. Pipeline de processamento
4. Sistema de rankeamento""",
            "metadata": {"source": "rag_system.txt", "topic": "RAG", "type": "explanation"}
        },
        {
            "content": """LangChain √© um framework para desenvolvimento de aplica√ß√µes com grandes modelos de linguagem (LLMs). Ele oferece ferramentas e abstra√ß√µes para construir aplica√ß√µes complexas de IA de forma mais f√°cil e estruturada.

Principais componentes:
- Chains: sequ√™ncias de opera√ß√µes
- Agents: sistemas aut√¥nomos que tomam decis√µes
- Memory: persist√™ncia de informa√ß√µes entre intera√ß√µes
- Tools: integra√ß√£o com APIs e servi√ßos externos
- Prompts: gerenciamento de prompts de forma eficiente

Casos de uso:
- Chatbots inteligentes
- Agentes de automa√ß√£o
- Sistemas de an√°lise de dados
- Aplica√ß√µes de processamento de documentos
- Integra√ß√£o com bases de dados

LangChain suporta m√∫ltiplos provedores de LLM, incluindo OpenAI, Anthropic, e modelos open-source.""",
            "metadata": {"source": "langchain.txt", "topic": "LangChain", "type": "explanation"}
        },
        {
            "content": """ChromaDB √© uma base de dados vetorial open-source projetada especificamente para aplica√ß√µes de intelig√™ncia artificial e machine learning. Ela √© otimizada para armazenar e buscar embeddings (representa√ß√µes vetoriais de texto, imagens ou outros dados).

Caracter√≠sticas principais:
- Armazenamento de embeddings de alta dimensionalidade
- Busca por similaridade eficiente
- Suporte a metadados
- Persist√™ncia de dados
- API Python simples
- Escalabilidade horizontal

Aplica√ß√µes t√≠picas:
- Sistemas de recomenda√ß√£o
- Busca sem√¢ntica
- Detec√ß√£o de duplicatas
- An√°lise de similaridade
- Sistemas RAG

Vantagens:
- F√°cil de usar
- Performance otimizada
- C√≥digo aberto
- Comunidade ativa
- Integra√ß√£o com frameworks populares""",
            "metadata": {"source": "chromadb.txt", "topic": "ChromaDB", "type": "explanation"}
        },
        {
            "content": """Embeddings s√£o representa√ß√µes vetoriais de dados (texto, imagens, √°udio) que capturam o significado sem√¢ntico em um espa√ßo vetorial de alta dimensionalidade. Esses vetores permitem que computadores compreendam e comparem o significado de diferentes elementos.

Como funcionam:
- Texto √© convertido em vetores num√©ricos
- Vetores similares representam conceitos similares
- Dist√¢ncia entre vetores indica similaridade sem√¢ntica
- Permitem opera√ß√µes matem√°ticas com significado

Tipos de embeddings:
- Word embeddings (Word2Vec, GloVe)
- Sentence embeddings (BERT, USE)
- Document embeddings
- Multimodal embeddings

Aplica√ß√µes:
- Busca sem√¢ntica
- Clustering de documentos
- An√°lise de sentimentos
- Tradu√ß√£o autom√°tica
- Sistemas de recomenda√ß√£o
- RAG e chatbots""",
            "metadata": {"source": "embeddings.txt", "topic": "Embeddings", "type": "explanation"}
        },
        {
            "content": """OpenAI √© uma empresa de pesquisa em intelig√™ncia artificial que desenvolve e oferece APIs de linguagem natural de ponta. Sua miss√£o √© garantir que a intelig√™ncia artificial geral beneficie toda a humanidade.

Principais produtos:
- GPT-4: modelo de linguagem mais avan√ßado
- GPT-3.5: modelo mais r√°pido e econ√¥mico
- DALL-E: gera√ß√£o de imagens a partir de texto
- Whisper: reconhecimento de fala
- Embeddings: representa√ß√µes vetoriais de texto

APIs dispon√≠veis:
- Chat Completions: para conversas interativas
- Completions: para gera√ß√£o de texto
- Embeddings: para convers√£o de texto em vetores
- Fine-tuning: para personaliza√ß√£o de modelos

Casos de uso:
- Chatbots e assistentes virtuais
- Gera√ß√£o de conte√∫do
- An√°lise de texto
- Tradu√ß√£o autom√°tica
- Programa√ß√£o assistida
- Educa√ß√£o e treinamento""",
            "metadata": {"source": "openai.txt", "topic": "OpenAI", "type": "explanation"}
        }
    ]
    
    return documents


def main():
    """Fun√ß√£o principal"""
    print("üìÑ CONFIGURANDO DOCUMENTOS PARA O SISTEMA RAG AVAN√áADO")
    print("=" * 60)
    
    # Configura logging
    logger = setup_logging("logs/setup_documents.log")
    logger.info("Iniciando configura√ß√£o de documentos")
    
    try:
        # Carrega configura√ß√£o
        print("üîß Carregando configura√ß√µes...")
        config = load_config()
        
        # Inicializa sistema RAG avan√ßado
        print("üöÄ Inicializando sistema RAG avan√ßado...")
        rag_system = RAGSystem(config, logger)
        
        # Carrega documentos de exemplo
        print("üìö Carregando documentos de exemplo...")
        documents = load_sample_documents()
        
        print(f"‚úÖ {len(documents)} documentos carregados")
        
        # Nota: O sistema avan√ßado n√£o tem m√©todo add_documents implementado
        # Os documentos s√£o carregados automaticamente no modo de teste
        print("\n‚ö†Ô∏è Nota: O sistema avan√ßado carrega documentos automaticamente")
        print("   Para adicionar documentos personalizados, modifique o c√≥digo")
        
        # Mostra informa√ß√µes do sistema
        system_info = rag_system.get_system_info()
        print(f"\nüìä Status do sistema:")
        print(f"   - Documentos dispon√≠veis: {system_info['documents_count']}")
        print(f"   - Vetorstore: {'Dispon√≠vel' if system_info['vectorstore_available'] else 'N√£o dispon√≠vel'}")
        print(f"   - Cross-Encoder: {'Dispon√≠vel' if system_info['cross_encoder_available'] else 'N√£o dispon√≠vel'}")
        print(f"   - BM25: {'Dispon√≠vel' if system_info['bm25_available'] else 'N√£o dispon√≠vel'}")
        
        print("\n‚úÖ Configura√ß√£o conclu√≠da!")
        logger.info("Configura√ß√£o de documentos conclu√≠da com sucesso")
        
    except Exception as e:
        error_msg = f"Erro durante configura√ß√£o: {e}"
        print(f"‚ùå {error_msg}")
        logger.error(error_msg)
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 